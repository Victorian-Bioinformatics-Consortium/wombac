#!/usr/bin/env perl
use strict;
use warnings;
use Time::Piece;
use FindBin;
use File::Path qw(make_path);
use File::Spec;
use List::Util qw(min max);
use Data::Dumper;

# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
# global variables

my $EXE = $FindBin::RealScript;
my $BINDIR = $FindBin::Bin;
my $VERSION = "2.0-alpha";
my $SYNOPSIS = "Rapid bacterial core genome SNP alignments";
my $AUTHOR = 'Torsten Seemann <torsten.seemann@monash.edu>';
my $URL = 'http://www.vicbioinformatics.com';
my $OPSYS = $^O;

# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
# command line options

my(@Options, $quiet, $outdir, $force, $cpus, $ref, $prefix,
             $run, $noref, $basequal, $mapqual, $mindepth, $minfrac, $add);
setOptions();

# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
# greet the user

msg("This is $EXE $VERSION");
msg("Written by $AUTHOR");
msg("Obtained from $URL");
msg("Detected operating system: $OPSYS");

# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
# give access to bundled tools (at end of PATH)

msg("Enabling bundled tools in: $BINDIR/binaries/{$OPSYS,noarch}");
$ENV{PATH} .= ":$BINDIR/../binaries/$OPSYS:$BINDIR/../binaries/noarch";

# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
# check for exes

for my $exe (qw(bwa freebayes parallel freebayes-parallel fasta_generate_regions.py vcfuniq vcffirstheader vcfstreamsort cat gzip tar make grep bgzip tabix)) {
  system("which $exe > /dev/null")==0 or err("Can not find '$exe' in PATH");
  msg("Found $exe - ok.");
}

for my $script (qw(wombac-shred_fasta wombac-core)) {
  my $path = "$BINDIR/$script";
  -x $path or err("Missing wombac helper script: $path");
  msg("Found $path - ok.");
}

# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
# type check parameters

# special settings if --add is use
if ($add) {
  $force = 1;
  $ref and err("You can't use --ref when using --add");
  $ref = "$outdir/ref.fa";
  -r $ref or err("Can't find ref in existing project: $ref");
  msg("Removing previous $prefix.* files");
  unlink map { "$outdir/$prefix.$_" } qw(gff bed aln vcf vcf.gz vcf.gz.tbi);
}

my @samples = map { File::Spec->rel2abs($_) } @ARGV;
@samples = grep { -d $_ or -f _ } @samples;
my $nsamp = scalar(@samples);
msg("You provided $nsamp readable samples.");
if ($add) {
  $nsamp >= 1 or err("Please provide at least one sample to add to set.");
}
else {
  $nsamp > 1 or err("You need to provide 2 or more valid readsets (folder) or contigs (file).");
}

my $cores = num_cores();
msg("Your computer has $cores cores.");
$cpus ||= $cores;
msg("Will use $cpus cores.");
my $threads = max( 1, int($cpus/$nsamp) );
my $jobs = min( $nsamp, int($cpus/$threads) );
msg("Found $nsamp samples. Will run concurrent $jobs jobs with $threads threads each.");

$ref or err("Please supply a reference FASTA file with --reference");
-r $ref or err("Invalid --reference filename");
$ref = File::Spec->rel2abs($ref);
msg("Using reference genome: $ref");

my $refsize = -s $ref;
msg("Reference genomes is about $refsize bp.");
my $chunksize = int($refsize / $cores / 3);
msg("Will call SNPs in parallel chunks of $chunksize bp.");

#unless ($noref) {
#  unshift @samples, $ref;
#  msg("Added the --ref file to list of samples. Use --noref to prevent this.");
#}

# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
# prepare output folder

$outdir or err("Please specify where to write results to using --outdir folder");
if (-d $outdir) {
  $force ? msg("Re-using existing output folder: $outdir")
         : err("Output folder '$outdir' already exists. Remove it, or use --force");
}
else {
  msg("Creating output folder: $outdir");
  make_path($outdir);
}

# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
# set options

my $bwa_mem_opts = '';
msg("Using extra BWA MEM options: $bwa_mem_opts");

my $shred_opts = sprintf "--coverage %d", 2*$mindepth;

# . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
# generate a makefile

my %seen;
my $LHS = '$@';
my $RHS = '$<';
my $CPUS = '$(CPUS)';
my $THREADS = '$(THREADS)';
my $CHUNKSIZE = '$(CHUNKSIZE)';
my $REF = '$(REF)';

open my $MF, '>', "$outdir/Makefile";
select $MF;

print qq~

PATH := $BINDIR/../binaries/noarch:\${PATH}:$BINDIR/../binaries/$OPSYS

THREADS=$threads
CPUS=$cpus
CHUNKSIZE=$chunksize
REF=ref.fa

.SUFFIXES: .bam .bai .vcf .vcf.gz .fa .fa.fai
.PHONY: all clean

%.fa.bwt: %.fa
	bwa index $RHS

%.fa.fai: %.fa
	samtools faidx $RHS

%.bam.bai: %.bam
	samtools index $RHS

%.vcf.gz: %.vcf
	bgzip -c $RHS > $LHS && tabix -f -p vcf $LHS

all: $prefix.vcf.gz

clean:
	rm -f $prefix.{aln,gff,bed,vcf,vcf.gz,vcf.gz.tbi}

$REF: $ref
	cp '$ref' $REF
~;

my @id;
if ($add) {
  @id = <$outdir/*.bam>;
  map { s/.bam$// } @id;
  map { s~^.*/~~ } @id;
  msg("Adding samples to existing ",scalar(@id), "ones in $outdir: @id");
}

for my $sample (@samples) 
{
  msg("Examining sample: $sample");
  my $id = file_to_id($sample);
  $seen{$id}++ and err("ID '$id' already in use.");
  msg("Assigned ID: $id");
  if ($id =~ m/^ref\.fa|^all$|^$prefix.aln$/) {
    err("Sorry, you can't have samples with ref.fa/$prefix.aln/all in their name");
  }

  my @reads;
  my @dep;
  
  if (-d $sample) {
    # sample which is a FOLDER
    @reads = find_read_files($sample);
    @reads > 0 or err("Could not find any reads in folder '$sample'");
    @dep = @reads;
  }
  else {
    # sample which is a FILE
    # if .tgz then assume NCBI tarball of contigs, else assume a fasta file
    if ( $sample =~ m/(\.tgz|\.tar.gz)$/ ) {
      @reads = ( "'<(tar -O -zxf $sample | $BINDIR/wombac-shred_fasta $shred_opts --fastq)'" );
    }
    else {
      @reads = ( "'<(gzip -c -d -f $sample | $BINDIR/wombac-shred_fasta $shred_opts --fastq)'" );
    }
    @dep = ($sample);
  }
  
  msg("$id reads: @reads");
  push @id, $id;

  # NOTE: samtools -f 3 includes these:
  #  read paired
  #  read mapped in proper pair
  # NOTE: samtools -F 3840 below are SAM flags to exclude these:
  #   read unmapped
  #   not primary alignment
  #   read fails platform/vendor quality checks
  #   read is PCR or optical duplicate
  #   supplementary alignment

  print
  "\n",
  "$id.bam: $REF.bwt @dep\n",
  "\tbwa mem $bwa_mem_opts -t \$(THREADS) -M -R '\@RG\tID:$id\tSM:$id' $REF @reads",
    " | samtools view -@ \$(THREADS) -q $mapqual -F 3844 -S -b -u -T $REF -",
    " | samtools sort -@ \$(THREADS) - $id\n",
}

my @bam = map { "$_.bam" } @id;
my @bai = map { "$_.bam.bai" } @id;

my $fb_opt = "-p 1 -q $basequal -m $mapqual -F $minfrac -C $mindepth";
my $core_opt = $noref ? '--noref' : '';

print qq~

regions.txt: $REF.fai
	fasta_generate_regions.py $RHS $CHUNKSIZE > $LHS

all.vcf: $REF regions.txt @bai
	freebayes-parallel regions.txt $CPUS -f $REF $fb_opt @bam > $LHS

#$prefix.aln $prefix.bed $prefix.gff $prefix.vcf: all.vcf
$prefix.vcf: all.vcf
	$BINDIR/wombac-core $core_opt --minfrac $minfrac --mindepth $mindepth --output $prefix --vcf $RHS

~;

select STDOUT;

msg("Your tree will contain", scalar(@id), "samples.");
msg("Folder $outdir/ is now set up for running.");
if ($run) {
  msg("Now running... please wait!");
  system("nice make -j $jobs -C $outdir 1> $outdir/log.out 2> $outdir/log.err");
  msg("Check $outdir/log.out and $outdir/log.err for errors.");
  msg("Done.");
}
else {
  msg("To run automagically: use the --run command line option");
  msg("To run interactively: nice make -j $jobs -C $outdir");
  msg("To run and then log out: nohup nice make -j $jobs -C $outdir 1> $outdir/log.out 2> $outdir/log.err &");
}

#----------------------------------------------------------------------

sub file_to_id {
  my($path) = @_;
  my(undef,$dirs,$fname) = File::Spec->splitpath($path);
  if ($fname) {
    $fname =~ s/\.[^.]+?$//; # remove extension
    return $fname;
  }
  my @dir = File::Spec->splitdir($dirs);
  return $dir[-1];
}

#----------------------------------------------------------------------

sub find_read_files {
  my($dir) = @_;
  # we try looking for data files in this order with these patterns:
  my @spec = qw(*.fq.gz *.fastq.gz *.fq *.fastq s_*.txt s_*.txt.gz);
  my @file;
  for my $spec (@spec) {
    msg("Checking for $spec");
    @file = sort( glob "$dir/$spec" );
    last if @file==2 or @file==1; # only SE or PE patterns
  }
  return @file;
}

#----------------------------------------------------------------------

sub num_cores {
  if ($^O =~ m/linux/i) {
    my($line) = qx(grep -c ^processor /proc/cpuinfo);
    return $1 if $line =~ m/^(\d+)/;
  }
  elsif ($^O =~ m/darwin/i){
    my($line) = qx(system_profiler SPHardwareDataType | grep Cores);
    return $1 if $line =~ /Cores: (\d+)/;
  }
  return 1; # assume single CPU if all else fails
}

#----------------------------------------------------------------------

sub msg {
  return if $quiet;
  my $t = localtime;
  my $line = "[".$t->hms."] @_\n";
  print STDERR $line;
}

#----------------------------------------------------------------------

sub err {
  $quiet=0;
  msg(@_);
  exit(2);
}

#----------------------------------------------------------------------

sub version {
  print STDERR "$EXE $VERSION\n";
  exit;
}

#----------------------------------------------------------------------

sub show_citation {
  print STDERR << "EOCITE";
  
If you use $EXE in your work, please cite:

    Seemann T (2013)
    $EXE: $SYNOPSIS
    http://github.com/Victorian-Bioinformatics-Consortium/wombac
    
Thank you.

EOCITE

  exit;
}

#----------------------------------------------------------------------
# Option setting routines

sub setOptions {
  use Getopt::Long;

  @Options = (
    'Options:',
    {OPT=>"help",      VAR=>\&usage,               DESC=>"This help"},
    {OPT=>"version",   VAR=>\&version,             DESC=>"Print version and exit"},
    {OPT=>"citation",  VAR=>\&show_citation,       DESC=>"Print citation for referencing $EXE"},
    {OPT=>"quiet!",    VAR=>\$quiet, DEFAULT=>0,   DESC=>"No screen output"},
    {OPT=>"ref=s",     VAR=>\$ref, DEFAULT=>'',    DESC=>"Reference FASTA file"},
    {OPT=>"noref!",    VAR=>\$noref, DEFAULT=>0,   DESC=>"Exclude reference from tree"},
    {OPT=>"outdir=s",  VAR=>\$outdir, DEFAULT=>'', DESC=>"Output folder"},
    {OPT=>"prefix=s",  VAR=>\$prefix, DEFAULT=>'core', DESC=>"Output filename prefix"},
    {OPT=>"force!",    VAR=>\$force, DEFAULT=>0,   DESC=>"Use existing output folder (can re-use calculations)"},
    {OPT=>"add!",      VAR=>\$add, DEFAULT=>'',    DESC=>"Add/append new samples to an existing folder"},
    {OPT=>"cpus=i",    VAR=>\$cpus, DEFAULT=>0,    DESC=>"Number of CPUs to use [auto]"},
    {OPT=>"run!",      VAR=>\$run, DEFAULT=>0,     DESC=>"Run the analysis after setting up"},
    {OPT=>"basequal=i", VAR=>\$basequal, DEFAULT=>20, DESC=>"Minimum base quality to use in variant calling"},
    {OPT=>"mapqual=i", VAR=>\$mapqual, DEFAULT=>60, DESC=>"Minimum mapping quality from BWA-MEM to keep"},
    {OPT=>"mindepth=i",VAR=>\$mindepth, DEFAULT=>10, DESC=>"Minimum depth of coverage to consider"},
    {OPT=>"minfrac=f",VAR=>\$minfrac, DEFAULT=>0.90, DESC=>"Minimum fraction supporting alternate/variant"},
  );

  (!@ARGV) && (usage());

  &GetOptions(map {$_->{OPT}, $_->{VAR}} grep { ref } @Options) || usage();

  # Now setup default values.
  foreach (@Options) {
    if (ref $_ && defined($_->{DEFAULT}) && !defined(${$_->{VAR}})) {
      ${$_->{VAR}} = $_->{DEFAULT};
    }
  }
}

#----------------------------------------------------------------------

sub usage {
  print STDERR "Synopsis:\n  $EXE $VERSION - $SYNOPSIS\n";
  print STDERR "Author:\n  $AUTHOR\n";
  print STDERR "Usage:\n  $EXE [options] --ref <ref.fa>  <sample1> <sample2> <sample3> ...\n";
  print STDERR "    <sample> = folder  ->  expect FASTQ files in it (will auto-detect them)\n";
  print STDERR "    <sample> = .tar.gz ->  expect tar of FASTA contigs (like NCBI/EBI distribute)\n";
  print STDERR "    <sample> = a file  ->  treat as FASTA file of contigs (already assembled)\n";
  foreach (@Options) {
    if (ref) {
      my $def = defined($_->{DEFAULT}) ? " (default '$_->{DEFAULT}')" : "";
      $def = ($def ? ' (default OFF)' : '(default ON)') if $_->{OPT} =~ m/!$/;
      my $opt = $_->{OPT};
      $opt =~ s/!$//; 
      $opt =~ s/=s$/ [X]/; 
      $opt =~ s/=i$/ [N]/;
      $opt =~ s/=f$/ [n.n]/;
      printf STDERR "  --%-15s %s%s\n", $opt, $_->{DESC}, $def;
    }
    else {
      print STDERR "$_\n";
    }      
  }
  exit(1);
}

#----------------------------------------------------------------------
