#!/usr/bin/env perl
use warnings;
use strict;
use Data::Dumper;
use List::MoreUtils qw(all any);
use POSIX qw(strftime);

##FORMAT=<ID=GT,Number=1,Type=String,Description="Genotype">
##FORMAT=<ID=GQ,Number=1,Type=Float,Description="Genotype Quality, the Phred-scaled marginal (or unconditional) probability of the called genotype">
##FORMAT=<ID=GL,Number=G,Type=Float,Description="Genotype Likelihood, log10-scaled likelihoods of the data given the called genotype for each possible genotype generated from the reference and alternate alleles given the sample ploidy">
##FORMAT=<ID=DP,Number=1,Type=Integer,Description="Read Depth">
##FORMAT=<ID=RO,Number=1,Type=Integer,Description="Reference allele observation count">
##FORMAT=<ID=QR,Number=1,Type=Integer,Description="Sum of quality of the reference observations">
##FORMAT=<ID=AO,Number=A,Type=Integer,Description="Alternate allele observation count">
##FORMAT=<ID=QA,Number=A,Type=Integer,Description="Sum of quality of the alternate observations">

my @cmdline = ($0, @ARGV);
my $username = $ENV{LOGNAME} || $ENV{USER} || getpwuid($<);

my(@Options, $verbose, $noref, $output, $vcf_fn, $mindepth, $minfrac);
setOptions();

$output or die "Please specify a prefix for output files, eg. --output snps";
$vcf_fn or die "Please specify a input VCF file, eg. --vcf core.vcf";
-r $vcf_fn or die "Can not read VCF file '$vcf_fn'";

my @inc = @ARGV;
map { s/\.bam$// } @inc;

open VCFOUT, '>', "$output.vcf" or die $!;  # just the _core_ SNPs

open BED, '>', "$output.bed" or die $!;

open GFF, '>', "$output.gff" or die $!;
print GFF "##gff-version 3\n";

open TXT, '>', "$output.txt" or die $!;
print  TXT "Command\t@cmdline\n";
printf TXT "DateTime\t%s\n", strftime("%a %b %e %H:%M:%S %Y", localtime);
print  TXT "Username\t$username\n";
print  TXT "MinDepth\t$mindepth\n";
print  TXT "MinFrac\t$minfrac\n";

open ALN, '>', "$output.aln" or die $!;
my %aln;

my $count=0;
my $coresize=0;
my @id;
my %index_of;

open VCFIN, '-|', "gzip -f -c -d \Q$vcf_fn\E" or die "can not open VCF file: $vcf_fn";
VARIANT:
while (<VCFIN>) {
  if (m/^##/) {
    print VCFOUT $_;
    next;
  }
  chomp;

  #CHROM  POS     ID      REF     ALT     QUAL    FILTER  INFO    FORMAT   DATA1 DATA2 DATA3 ...
  my($seq,$pos,undef,$ref,$alt,$qual,$filter,$info,$format,@data) = split m/\t/;
  my $line = $_;
  print STDERR "Processed $. potential variant sites so far...\n" if $. % 10_000 == 0;

  if ($seq eq '#CHROM') {
    $data[0] eq 'unknown' and die "Your BAM files must have \@RG ID: tags.";
    @id = @data;
    @inc = @data unless @inc;
    printf STDERR "Found %d samples in $vcf_fn: @id\n", scalar(@id);
    unshift @inc, 'Reference' unless $noref;
    printf STDERR "Will include %d of them: @inc\n", scalar(@inc);
    printf TXT "NumSamples\t%d\n", scalar(@id);
    print  TXT "SampleIDs\t@id\n";
    map { $index_of{ $data[$_] } = $_ } (0 .. @data-1);
#    print STDERR Dumper(\%index_of);
    print VCFOUT "$line\n";
    next;
  }

#  print STDERR ">>> $seq $pos $ref $alt $qual\n";
#  print STDERR "\n<<< $line\n" if $verbose;
  
  # not sure why this stuff gets through
  if ($qual < 100) {
    print STDERR "Skipping $seq:$pos as QUAL < 100\n" if $verbose;
    next VARIANT;
  }

  # extract the common tags (not per sample)  
  my $attr = vcf_tags_to_hash($info);

  my @type = split m/,/, $attr->{TYPE};
  my @alt = split m/,/, $alt;
  my @genotype = ($ref, @alt);
  unless ( (all { m/^snp$/ } @type) or (all { m/^mnp$/ } @type) ) {
    print STDERR "Skipping $seq:$pos as alleles aren't all SNP or MNP type: @type\n" if $verbose;
    next VARIANT;
  }
  my $varlen = length($ref);
  unless (all { length($_) == $varlen } @alt) {
    print STDERR "Skipping $seq:$pos as ALTs differ in length to REF: $ref | @alt\n" if $verbose;
    next VARIANT;
  }
  
  # collate out data for this site
  my %snp;

  $snp{'Reference'}{ALLELE} = $ref unless $noref;
  
  ID:
  for my $id (@inc) {
    next if $id eq 'Reference';
    exists $index_of{$id} or die "unknown sample '$id'";
    my $gt = vcf_format_data_to_hash( $format, $data[$index_of{$id}] );
    
    # print STDERR "genotype | @type | @genotype\n";
    if ($gt) {
      $snp{$id}{ALLELE} = $genotype[ $gt->{GT} ];
      if ($gt->{DP} < $mindepth) {
        print STDERR "Skipping $seq:$pos because $id DP $gt->{DP} < $mindepth\n" if $verbose;
        next VARIANT;
      }
#      print STDERR "$seq:$pos\tGT=$gt->{GT}\tRO=$gt->{RO}\tAO=$gt->{AO}\n" if $verbose;
      my @count = ($gt->{RO}, split m/,/, $gt->{AO});
      my $frac = $count[ $gt->{GT} ] / $gt->{DP} ;
      if ($frac < $minfrac) {
        print STDERR "Skipping $seq:$pos because $id FRAC < $minfrac\n" if $verbose;
        next VARIANT;
      }
    }
    else {
      # if we get here we have an empty "." FORMAT field for this sample
      print STDERR "Skipping $seq:$pos because $id has no basecall\n" if $verbose;
      next VARIANT;
    }
    
  }
  
  # is this core?
  unless ( scalar(keys %snp) == scalar(@inc) ) {
    print STDERR "Skipping $seq:$pos as it is non-core\n".Dumper(\%snp,\@inc) if $verbose;
    next VARIANT;
  }

  # make a string of all our allese
#  print STDERR Dumper('COLUMN', \%snp, \@inc);
  my @col = map { $snp{$_}{ALLELE} } @inc;
  my $col = join('-', @col);

  # are all the ALT alleles the same? this can happen when --noref is being used!!!!
  # FIXME: only test this when --noref being used?
  if (all { $col[0] eq $_ } @col) {   
    print STDERR "Skipping $seq:$pos because monomorphic: $col\n" if $verbose;
    next VARIANT;
  }

  # append to each sample's FASTA alignment string
  map { $aln{$_} .= $snp{$_}{ALLELE} } @inc;

  $count++;
  $coresize += $varlen;
  my $label = sprintf "%s%06d", $output, $count;
  print BED join("\t", $seq, $pos-1, $pos+$varlen-1, $label), "\n";
  print GFF join("\t", $seq, 'wombac', 'variation', $pos, $pos+$varlen-1, qw(. . .),
    "ID=$label;product=$col"),"\n";
  print VCFOUT "$line\n";

#  print STDERR ">>> $line\n" if $verbose;

}
close VCFIN;

print STDERR "Output $coresize bases from $count variant SNP/MNP sites.\n";
print TXT "CoreSNPs\t$coresize\n";
print TXT "CoreSites\t$count\n";

for my $id (sort keys %aln) {
  print ALN ">$id\n", $aln{$id}, "\n";
} 

print STDERR "Compressing & indexing $output.vcf\n";
system("bgzip -c $output.vcf > $output.vcf.gz && tabix -f -p vcf $output.vcf.gz");
print STDERR "Done.\n";


#----------------------------------------------------------------------
# name1=tag1;name2;name3=tag3 => HASH

sub vcf_tags_to_hash {
  my($s) = @_;
  my @pairs = split m/;/, $s;
  my %tag;
  for my $p (@pairs) {
    my @x = split m/=/, $p;
    $tag{$x[0]} = $x[1];  # will be =>undef for bareword tags eg. INDEL;
  }
  return \%tag;
}

#----------------------------------------------------------------------
# tag1:tag2:tag3 + value1:value2:value3 => HASH

sub vcf_format_data_to_hash {
  my($f,$d) = @_;
  return if $d eq '.';
  my @f = split m/:/, $f;
  my @d = split m/:/, $d;
  my %tag;
  for my $i (0 .. $#f) {
    $tag{ $f[$i] } = $d[$i];
  }
  return \%tag;
}

#----------------------------------------------------------------------
# Option setting routines

sub setOptions {
  use Getopt::Long;

  @Options = (
    {OPT=>"help",    VAR=>\&usage,             DESC=>"This help"},
    {OPT=>"verbose!",  VAR=>\$verbose, DEFAULT=>0, DESC=>"Verbose output"},
    {OPT=>"mindepth=i",  VAR=>\$mindepth, DEFAULT=>10, DESC=>"Minimum depth to count as covered (in core)"},
    {OPT=>"minfrac=f",  VAR=>\$minfrac, DEFAULT=>0.9, DESC=>"Minimum fraction of allele to be taken seriously"},
    {OPT=>"vcf=s",  VAR=>\$vcf_fn, DEFAULT=>'all.vcf', DESC=>"Combined freebayes VCF 4.x file with all samples in DATA columns"},
    {OPT=>"noref!",  VAR=>\$noref, DEFAULT=>0, DESC=>"Don't include reference in tree"},
    {OPT=>"output=s",  VAR=>\$output, DEFAULT=>'core', DESC=>"Output prefix for .aln/.bed/.gff/.vcf/.txt"},
  );

  (!@ARGV) && (usage());

  &GetOptions(map {$_->{OPT}, $_->{VAR}} @Options) || usage();

  # Now setup default values.
  foreach (@Options) {
    if (defined($_->{DEFAULT}) && !defined(${$_->{VAR}})) {
      ${$_->{VAR}} = $_->{DEFAULT};
    }
  }
}

sub usage {
  print "Usage: $0 [options] --out prefix --vcf wombac.vcf [sample1 sample2 ... (default=ALL)]\n";
  foreach (@Options) {
    printf "  --%-13s %s%s.\n",$_->{OPT},$_->{DESC},
           defined($_->{DEFAULT}) ? " (default '$_->{DEFAULT}')" : "";
  }
  exit(1);
}
 
#----------------------------------------------------------------------
